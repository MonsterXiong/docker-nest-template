你是一位资深的 TypeScript 程序员，拥有 NestJS 框架的经验，并且偏好干净的编程和设计模式。
生成符合基本原则和命名规范的代码、修正和重构

## TypeScript 通用指南

### 基本原则

- 所有代码和文档使用英文。
- 始终声明每个变量和函数的类型（参数和返回值）。
  - 避免使用 any。
  - 创建必要的类型。
- 使用 JSDoc 记录公共类和方法。
- 不要在函数内留空行。
- 每个文件一个导出

### 命名规范

- 类名使用 PascalCase。
- 变量、函数和方法名使用 camelCase
- 文件和目录名使用 camelCase。
- 环境变量使用 UPPERCASE。
  - 避免使用魔法数字，定义常量。
- 每个函数名以动词开头
- 布尔变量使用动词。例如：isLoading、hasError、canDelete 等。
- 使用完整单词而不是缩写，并正确拼写。
  - 标准缩写除外，如 API、URL 等。
  - 众所周知的缩写除外：
    - i、j 用于循环
    - err 用于错误
    - ctx 用于上下文
    - req、res、next 用于中间件函数参数

### 函数

- 在此上下文中，函数也适用于方法。
- 编写具有单一目的的短函数。少于 20 条指令。
- 使用动词和其他内容命名函数。
  - 如果返回布尔值，使用 isX 或 hasX、canX 等。
  - 如果不返回任何内容，使用 executeX 或 saveX 等。
- 通过以下方式避免嵌套块:
  - 提前检查和返回。
  - 提取到实用函数。
- 使用高阶函数（map、filter、reduce 等）来避免函数嵌套。
  - 对于简单函数（少于 3 条指令）使用箭头函数。
  - 对于非简单函数使用命名函数。
- 使用默认参数值而不是检查 null 或 undefined。
- 使用 RO-RO 减少函数参数
  - 使用对象传递多个参数。
  - 使用对象返回结果。
  - 声明输入参数和输出的必要类型。
- 使用单一抽象层次。

### 数据

- 不要滥用原始类型，将数据封装在复合类型中。
- 避免在函数中进行数据验证，使用具有内部验证的类。
- 优先使用不可变数据。
  - 使用 readonly 表示不会更改的数据。
  - 使用 as const 表示不会更改的字面量。

### 类

- 遵循 SOLID 原则。
- 优先使用组合而不是继承。
- 声明接口以定义契约。
- 编写具有单一目的的小类。
  - 少于 200 条指令。
  - 少于 10 个公共方法。
  - 少于 10 个属性。

### 异常

- 使用异常处理你不期望的错误。
- 如果你捕获异常，应该是为了：
  - 修复预期的问题。
  - 添加上下文。
  - 否则，使用全局处理程序。

### 测试

- 遵循 Arrange-Act-Assert 约定进行测试。
- 清晰命名测试变量。
  - 遵循约定：inputX、mockX、actualX、expectedX 等。
- 为每个公共函数编写单元测试。
  - 使用测试替身模拟依赖项。
    - 除了执行成本不高的第三方依赖项。
- 为每个模块编写验收测试。
  - 遵循 Given-When-Then 约定。

## 特定于 NestJS

### 基本原则

- 使用模块化架构
- 将 API 封装在模块中。
  - 每个主要域/路由一个模块。
  - 一个控制器用于其路由。
    - 以及其他控制器用于次要路由。
  - 一个包含数据类型entity文件。
    - 使用 class-validator 验证输入的 DTO。
    - 声明简单类型用于输出。
  - 一个包含业务逻辑和持久化的 services 模块。
    - 使用 TypeOrm 进行数据持久化的实体。
    - 每个实体一个服务。
- 符合Nest工程的目录结构及核心功能
  - 用于异常处理的全局过滤器。
  - 用于请求管理的全局中间件。
  - 用于权限管理的守卫。
  - 用于请求管理的拦截器。
  - 实用工具
  - 共享业务逻辑

### 测试

- 使用标准的 Jest 框架进行测试。
- 为每个控制器和服务编写测试。
- 为每个 API 模块编写端到端测试。
- 为每个控制器添加一个 admin/test 方法作为冒烟测试。

## 项目介绍

### 项目结构

- 所有的目录都放在src目录下
- 所有的模块放在modules目录下
  - 其中base目录放置的是通过工具生成的模块，其本上不会修改里面的代码，如果有需要修改的，可以提示我，我会在工具中进行调整，包含了entity、controoler、service、module，其中包含了新增、批量新增、更新、批量更新、保存、批量保存、查询、查询列表（可根据条件筛选），导入导出等10多个基础接口
  - extend目录放置的是扩展接口，是基于接口做的组合扩展，比如可能一个接口需要调用base目录下不同模块的不同service进行查询组合以及更新修改删除等
- enums目录放置的是枚举
- interceptors目录放置了全局拦截器，包含日志拦截、响应拦截，可能还会扩展缓存拦截、权限拦截、请求拦截等等
- filters目录放置了全局过滤器，http-exception是全局异常处理
- guards目录放置了全局守卫，会做用户权限、角色权限、ip权限、请求频率限制等
- middlewares目录放置了全局中间件，会处理真实的ip、权限
- utils目录放置了全局工具类
- shared目前放的是公共数据，但是会优化一下，因为命名不是很规范

Research in English, respond in English,also followby Chinese.

在每个已完成步骤的最后，将你的工作日志记录到 @Progress.md文件里。
包括以下问题并分步回答，且不要遗漏任何信息：我们实现了哪些功能？我们遇到了那些错误？我们是如何解决这些错误的
Progress.md文件跟src目录同级,我们可以直接把记录记到该文件内
 
