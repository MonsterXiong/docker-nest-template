import { Column, Entity,PrimaryColumn, UpdateDateColumn, CreateDateColumn, DeleteDateColumn, BeforeInsert, BeforeUpdate } from 'typeorm' ;
import { ApiProperty } from '@nestjs/swagger';
import { CommonEntity } from '../../common/common.entity';
import { nanoid } from 'nanoid';
import { format } from 'date-fns';

@Entity({
  comment: '<%= tableComment %>'
})
export class <%=TableName %> extends CommonEntity {
<% fields.filter(field=>!field.columnOptions.Field.startsWith('sys_')).forEach(function(field){ %>
  @ApiProperty({
    description: '<%=field.comment %>',
    example: ""
  })
  <%_if (field.isPrimary) { -%>
  @PrimaryColumn({
  <%_ }else{ -%>
  @Column({
  <%_ } -%>
    name:'<%=field.columnOptions.Field %>',
    nullable: <%=field.nullable %>,
    type: '<%=field.sourceType %>',
    comment: '<%=field.comment %>',
    <%_if (field.default != null) { -%>
    default: <%_if(['boolean','number'].includes(field.type)){-%><%=field.default %><%_ }else{-%>'<%=field.default %>'<%_ } -%>,
    <%_ }-%>
    <%_if (field.length) { -%>
      <%_if( field.type !='number'){-%>
    length: <%=field.length %>,
      <%_ }else{-%>
    width: <%=field.length %>,
      <%_ }-%>
    <%_ }-%>
  })
  <%=field.columnName %>: <%=field.type %>
<% }); %>

  @BeforeInsert()
  generateId() {
    if (!this.<%= primaryKey %>) {
      this.<%= primaryKey %> = nanoid()
    }
    this.sysCreateTime = format(new Date(), 'yyyy:MM:dd HH:mm:ss');
  }

  @BeforeUpdate()
  updateTime() {
    this.sysUpdateTime = format(new Date(), 'yyyy:MM:dd HH:mm:ss');
  }
}

